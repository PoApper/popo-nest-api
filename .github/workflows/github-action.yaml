name: Docker Build and Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

env:
  ECR_REGISTRY: 151345152001.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: popo-nest-api

# 같은 PR 안에서는 가장 최근 push만 워크플로우를 실행하도록 설정
concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    name: Run pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          pip install pre-commit

      - name: Install dependencies
        run: npm ci --force

      - name: Run pre-commit
        run: |
          pre-commit run --all-files

  test:
    name: Run tests
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm run test

  docker_build_and_push:
    name: Docker build and push
    needs: [lint, test]
    runs-on: ubuntu-24.04-arm
    # docker_build_and_push 잡은 모든 워크플로우에서 유일하게 하나만 실행되도록 설정
    concurrency:
      group: docker-build
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64' # support AWS EC2 t4g
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Determine Prod/Dev Stage
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            echo "PROD"
            echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          else
            echo "DEV"
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64 # support AWS EC2 t4g
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          build-args: |
            "POPO_VERSION=${{ github.event.release.tag_name || github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          provenance: false # Disable image index metadata

  redeploy_dev_service:
    name: Redeploy Dev Service
    needs: docker_build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Redeploy Dev Service
        run: |
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X POST ${{ secrets.PORTAINER_DEV_SERVICE_WEBHOOK }})
          if [ "$RESPONSE" -ne 204 ]; then
            echo "❌ Deployment failed! HTTP Response: $RESPONSE"
            cat response.txt  # 오류 메시지 출력 (필요 시)
            exit 1
          fi
          echo "✅ Deployment successful! HTTP Response: $RESPONSE"
      # 머신에 사용되지 않는 이미지 쌓여서 디스크 부족해지는 것을 방지하기 위해 삭제
      - name: Clean up old Docker images on EC2 (only for dev)
        if: success()
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.POPO_EC2_HOSTNAME }}
          username: ${{ secrets.POPO_EC2_USERNAME }}
          key: ${{ secrets.POPO_EC2_SSH_KEY }}
          script: |
            echo "::group::컨테이너 확인"
            docker ps -a
            echo "::endgroup::"
            echo "::group::이미지 확인"
            docker images
            echo "::endgroup::"
            echo "사용하지 않는 이미지 및 컨테이너 제거"
            docker system prune -af

  deploy_health_check:
    name: Check Application Status
    needs: redeploy_dev_service
    runs-on: ubuntu-latest
    steps:
      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v4
        with:
          url: https://api.popo.poapper.club|https://api.popo-dev.poapper.club
          follow-redirect: true
          max-attempts: 3
          retry-delay: 10s
